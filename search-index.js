var searchIndex = JSON.parse('{\
"runa":{"doc":"RuNA","t":[0,0,0,12,12,13,13,4,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,16,18,18,18,18,16,8,18,5,11,11,5,5,5,5,5,5,5,11,11,11,11,11,5,5,5,5,5,5,5,10,11,11,11,11],"n":["dna","io","math","0","1","A","C","Dna","DnaBlock","DnaMetricSpace","G","Gap","T","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_str","from_str","into","into","into","sub","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","read_test_inst","read_test_inst_of_size","read_test_insts_all","read_test_insts_by_size","Align","Cost","DEL","GAP","INFCOST","INS","Item","MetricSpace","ZEROCOST","align_lettre_mot","borrow","borrow_mut","coupure","cout_align","dist_1","dist_2","dist_dp_full","dist_naif","dist_naif_rec","eq","fmt","fmt","from","into","mot_gaps","prog_dyn","rm_gaps","sol_1","sol_1_tab","sol_2","sol_2_ll","sub","to_string","try_from","try_into","type_id"],"q":["runa","","","runa::dna","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runa::io","","","","runa::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The crate containing information specific to Dna …","Input/Output library of the crate.","The Math crate of the project","","","","","Dna element, an item in a dna sequence","Data structure representing a pair of Dna’s","Metric space defined for dna sequences, it is defined as …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","read test instance by filename","read a test instance of a given size ","read all test instances lazily, indeed it will load the …","read test instances lazily, indeed it will load the …","","","","","","","","A structure meant to be passed as a generic parameter to …","","Align a letter with a word in the optimal way. O(n) time","","","Calculate the optimal cutting point in sequence y for the …","Calculate the cost of the alignment (x, y) passed as …","Compute distance using a 2D table O(n^2) time O(n^2) …","Calculate the distance between two sequences O(n^2) time …","Compute the 2D dynamic-programming table for the sequences …","Calculate distance between sequences x and y in the …","auxiliary function for dist_naif","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Generate a word composed of gaps of length n","Calculate the optimal alignment and the distance between …","Remove all gaps from the sequence","Compute the optimal alignment using a 2D table O(n^2) time …","Same as sol_1 but you pass in the table manually","Compute the alignement of two sequences in O(n^2) time and …","Auxiliary function for sol_2 O(n^2) time and O((n+m)log n) …","","","","",""],"i":[0,0,0,4,4,1,1,0,0,0,1,1,1,1,3,4,1,3,4,1,1,1,3,4,1,1,3,4,1,3,4,1,4,1,3,4,3,1,1,1,3,4,1,3,4,1,3,4,0,0,0,0,0,17,17,17,17,17,17,0,17,0,18,18,0,0,0,0,0,0,0,18,18,18,18,18,0,0,0,0,0,0,0,17,18,18,18,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[[1,1],2],[[3,3],2],[[4,4],2],[[1,5],6],[[1,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[7,[[8,[1]]]],[7,[[8,[4]]]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],[[],10],[7,[[8,[4,[12,[11]]]]]],[13,[[8,[4,[12,[11]]]]]],[[],14],[[],14],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],13],[[]],[[]],[[]],[[],[[15,[15]]]],[[]],[[]],[[[18,[[0,[16,17]]]],18],2],[[[18,[[0,[19,17]]]],5],6],[[[18,[17]],5],6],[[]],[[]],[13,20],[[]],[15,15],[[],18],[[],18],[[],18],[[]],[[]],[[],9],[[],8],[[],8],[[],10]],"p":[[4,"Dna"],[15,"bool"],[3,"DnaMetricSpace"],[3,"DnaBlock"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"Error"],[3,"Box"],[15,"usize"],[8,"Iterator"],[3,"Vec"],[8,"PartialEq"],[8,"MetricSpace"],[3,"Align"],[8,"Debug"],[3,"LinkedList"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
